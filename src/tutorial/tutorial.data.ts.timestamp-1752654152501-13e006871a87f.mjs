// src/tutorial/tutorial.data.ts
import path2 from "path";
import { createMarkdownRenderer } from "file:///C:/Users/26513/Desktop/work/github/yishe-docs/node_modules/.pnpm/vitepress@1.5.0_@algolia+client-search@4.24.0_@types+node@22.7.5_postcss@8.4.49_search-insights@2.17.2_typescript@5.6.3/node_modules/vitepress/dist/node/index.js";

// src/examples/examples.data.ts
import fs from "fs";
import path from "path";

// src/examples/utils.ts
import { onBeforeUnmount } from "file:///C:/Users/26513/Desktop/work/github/yishe-docs/node_modules/.pnpm/vue@3.5.13_typescript@5.6.3/node_modules/vue/index.mjs";

// src/examples/examples.data.ts
function readExamples(srcDir) {
  const examples = fs.readdirSync(srcDir);
  const data = {};
  for (const name of examples) {
    data[name] = readExample(path.join(srcDir, name));
  }
  return data;
}
function readExample(dir) {
  const filenames = fs.readdirSync(dir);
  const files = {};
  for (const filename of filenames) {
    const fullPath = path.join(dir, filename);
    if (fs.statSync(fullPath).isDirectory()) {
      if (filename === "_hint") {
        files[filename] = readExample(fullPath);
      } else {
        files[filename] = readComponentDir(fullPath);
      }
    } else {
      files[filename] = fs.readFileSync(fullPath, "utf-8");
    }
  }
  if (files._hint) {
    for (const filename in files) {
      if (filename !== "_hint") {
        let hint = files._hint[filename];
        if (!hint) {
          hint = files._hint[filename] = {};
        }
        const original = files[filename];
        if (typeof original !== "string" && typeof hint !== "string") {
          for (const key in original) {
            if (!(key in hint)) {
              hint[key] = original[key];
            }
          }
        }
      }
    }
  }
  return files;
}
function readComponentDir(dir) {
  const filenames = fs.readdirSync(dir);
  const files = {};
  for (const filename of filenames) {
    let content = fs.readFileSync(path.join(dir, filename), "utf-8");
    if (!content.endsWith("\n")) content += "\n";
    files[filename] = content;
  }
  return files;
}

// src/tutorial/tutorial.data.ts
var __vite_injected_original_dirname = "C:\\Users\\26513\\Desktop\\work\\github\\yishe-docs\\src\\tutorial";
var tutorial_data_default = {
  watch: "./src/**",
  async load() {
    const md = await createMarkdownRenderer(process.cwd(), {
      theme: "github-dark"
    }, "/");
    const files = readExamples(path2.resolve(__vite_injected_original_dirname, "./src"));
    for (const step in files) {
      const stepFiles = files[step];
      const desc = stepFiles["description.md"];
      if (desc) {
        stepFiles["description.md"] = md.render(desc);
      }
    }
    return files;
  }
};
export {
  tutorial_data_default as default
};
//# sourceMappingURL=data:application/json;base64,
